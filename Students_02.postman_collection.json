{
	"info": {
		"_postman_id": "8879c62e-31fd-4e95-944a-de40ec590834",
		"name": "Students_02",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20299345"
	},
	"item": [
		{
			"name": "GETSingleRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Content-Type header is present', function () {\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"})\r",
							"\r",
							"pm.test('Content-Type header is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"})\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Test data type of the response', () => {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"    pm.expect(jsonData.courses).to.be.an('array');\r",
							"})\r",
							"\r",
							"pm.test('Test array properties', () => {\r",
							"    pm.expect(jsonData.courses).to.have.members([\r",
							"        'Java',\r",
							"        'Selenium'\r",
							"    ]);\r",
							"})\r",
							"\r",
							"pm.test(\"test field Value of ObjectData\", () => {\r",
							"    pm.expect(jsonData.id).to.eql(\"1\");\r",
							"    pm.expect(jsonData.name).to.eql(\"sok\");\r",
							"    pm.expect(jsonData.location).to.eql(\"Dallas\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"123456789\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
							"});\r",
							"\r",
							"\r",
							"// validate json schema\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GETAllRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// test response body\r",
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Content-Type header is present', function () {\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"})\r",
							"\r",
							"pm.test('Content-Type header is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"})\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Test data type of the response', () => {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"    pm.expect(jsonData.courses).to.be.an('array');\r",
							"})\r",
							"\r",
							"pm.test('Test array properties', () => {\r",
							"    pm.expect(jsonData.courses).to.have.members([\r",
							"        'Java',\r",
							"        'Selenium'\r",
							"    ]);\r",
							"})\r",
							"\r",
							"pm.test(\"test field Value of ObjectData\", () => {\r",
							"    pm.expect(jsonData.id).to.eql(\"1\");\r",
							"    pm.expect(jsonData.name).to.eql(\"sok\");\r",
							"    pm.expect(jsonData.location).to.eql(\"Dallas\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"123456789\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
							"});\r",
							"\r",
							"\r",
							"// validate json schema\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "POSTRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Content-Type header is present', function () {\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"})\r",
							"\r",
							"pm.test('Content-Type header is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"})\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Test data type of the response', () => {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"    pm.expect(jsonData.courses).to.be.an('array');\r",
							"})\r",
							"\r",
							"pm.test('Test array properties', () => {\r",
							"    pm.expect(jsonData.courses).to.have.members([\r",
							"        'Java',\r",
							"        'Selenium'\r",
							"    ]);\r",
							"})\r",
							"\r",
							"pm.test(\"test field Value of ObjectData\", () => {\r",
							"    pm.expect(jsonData.id).to.eql(\"1\");\r",
							"    pm.expect(jsonData.name).to.eql(\"sok\");\r",
							"    pm.expect(jsonData.location).to.eql(\"Dallas\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"123456789\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
							"});\r",
							"\r",
							"\r",
							"// validate json schema\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ksatra\",\r\n    \"location\": \"Janpan\",\r\n    \"phone\": \"567891234\",\r\n    \"courses\": [\r\n        \"Ruby\",\r\n        \"Pearl\"\r\n    ]\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUTRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Content-Type header is present', function () {\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"})\r",
							"\r",
							"pm.test('Content-Type header is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"})\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Test data type of the response', () => {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"    pm.expect(jsonData.courses).to.be.an('array');\r",
							"})\r",
							"\r",
							"pm.test('Test array properties', () => {\r",
							"    pm.expect(jsonData.courses).to.have.members([\r",
							"        'Java',\r",
							"        'Selenium'\r",
							"    ]);\r",
							"})\r",
							"\r",
							"pm.test(\"test field Value of ObjectData\", () => {\r",
							"    pm.expect(jsonData.id).to.eql(\"1\");\r",
							"    pm.expect(jsonData.name).to.eql(\"sok\");\r",
							"    pm.expect(jsonData.location).to.eql(\"Dallas\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"123456789\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
							"});\r",
							"\r",
							"\r",
							"// validate json schema\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"id\": \"2e64\",\r\n        \"name\": \"Ksatra\",\r\n        \"location\": \"Cambodia-Janpan\",\r\n        \"phone\": \"567891234\",\r\n        \"courses\": [\r\n            \"Agriculture\",\r\n            \"Packing\"\r\n        ]\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/2e64",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"2e64"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETERequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Content-Type header is present', function () {\r",
							"    pm.response.to.have.header('Content-Type');\r",
							"})\r",
							"\r",
							"pm.test('Content-Type header is application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"})\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Test data type of the response', () => {\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"    pm.expect(jsonData.courses).to.be.an('array');\r",
							"})\r",
							"\r",
							"pm.test('Test array properties', () => {\r",
							"    pm.expect(jsonData.courses).to.have.members([\r",
							"        'Java',\r",
							"        'Selenium'\r",
							"    ]);\r",
							"})\r",
							"\r",
							"pm.test(\"test field Value of ObjectData\", () => {\r",
							"    pm.expect(jsonData.id).to.eql(\"1\");\r",
							"    pm.expect(jsonData.name).to.eql(\"sok\");\r",
							"    pm.expect(jsonData.location).to.eql(\"Dallas\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"123456789\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\");\r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"Selenium\");\r",
							"});\r",
							"\r",
							"\r",
							"// validate json schema\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", () => {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/2e64",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"2e64"
					]
				}
			},
			"response": []
		}
	]
}